##########################################################################################
######################## PCA in generalized convex spaces in Pytorch #####################
##########################################################################################

import numpy as np
import pandas as pd
from matplotlib import image
import torch
from PIL import Image
import torchvision
import torchvision.transforms as T
import cv2
import matplotlib.pyplot as plt
import scipy.stats as ss
from mpl_toolkits.mplot3d import Axes3D
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from numpy.linalg import inv
from numpy import genfromtxt
from scipy import linalg
import csv
import matplotlib.animation as animation
import math
import time
from mpl_toolkits import mplot3d
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
from torchvision import datasets as dts
from torchvision.transforms import ToTensor 
from torchvision import transforms
from torchvision import datasets as dataset


#### example with 1 image ###############
RGB_img = plt.imread("images/video.jpg")
##########################################

print(RGB_img.shape)
b, g, r = cv2.split(RGB_img)

plt.imshow(RGB_img)

r_scaled = r / 255
g_scaled = g / 255
b_scaled = b / 255

model_PCA = PCAAlpha(alpha= 0.4, nb_components = 12)
r2 = model_PCA.fit_inverse2(torch.from_numpy(r_scaled))
g2 = model_PCA.fit_inverse2(torch.from_numpy(g_scaled))
b2 = model_PCA.fit_inverse2(torch.from_numpy(b_scaled))

img_compressed = cv2.merge((r2.numpy(), g2.numpy(), b2.numpy()))
plt.imshow(img_compressed)
